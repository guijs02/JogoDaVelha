@page "/"
@using JogoDaVelha.Classes;

@using JogoDaVelha.Dificuldades
@using JogoDaVelha.Pages.Modals

@if (OnInitializedCompleted)
{
    <h1 id="maintext" style="text-align:center"> tic tac toe</h1>
    <div class="container" id="main">

        <div class="box" style="border-left: 0; border-top: 0" id="box1" @onclick="@(() => ActionCasas(0))">
            <img src="@game.iconGame[0]" class="img-x-o" style="display:@game.DisplayCasa[0]" />

        </div>
        <div class="box" style="border-top: 0" id="box2" @onclick="@(() => ActionCasas(1))">

            <img src="@game.iconGame[1]" class="img-x-o" style="display:@game.DisplayCasa[1]" />
        </div>
        <div class="box" style="border-top: 0; border-right: 0" id="box3"  @onclick="@(() => ActionCasas(2))">
            <img src="@game.iconGame[2]" class="img-x-o" style="display:@game.DisplayCasa[2]" />

        </div>

        <div class="box" style="border-left: 0" id="box4"  @onclick="@(() => ActionCasas(3))">
            <img src="@game.iconGame[3]" class="img-x-o" style="display:@game.DisplayCasa[3]" />

        </div>

        <div class="box" id="box5" @onclick="@(() => ActionCasas(4))">
            <img src="@game.iconGame[4]" class="img-x-o" style="display:@game.DisplayCasa[4]" />

        </div>
        <div class="box" style="border-right: 0" id="box6" @onclick="@(() => ActionCasas(5))">
            <img src="@game.iconGame[5]" class="img-x-o" style="display:@game.DisplayCasa[5]" />

        </div>

        <div class="box" style="border-left: 0; border-bottom: 0" id="box7" @onclick="@(() => ActionCasas(6))">
            <img src="@game.iconGame[6]" class="img-x-o" style="display:@game.DisplayCasa[6]" />

        </div>
        <div class="box" style="border-bottom: 0" id="box8" @onclick="@(() => ActionCasas(7))">
            <img src="@game.iconGame[7]" class="img-x-o" style="display:@game.DisplayCasa[7]" />
        </div>
        <div class="box" style="border-right: 0; border-bottom: 0" id="box9" @onclick="@(() => ActionCasas(8))">
            <img src="@game.iconGame[8]" class="img-x-o" style="display:@game.DisplayCasa[8]" />
        </div>
    </div>

    <button class="btn btn-success" @onclick="@(() => Reset(8))">Reiniciar</button>

    <select id="selected" onchange="ChangeBackGroundColor()">
        <option value="light">Light </option>
        <option value="dark">Dark</option>
    </select>
}


@if (ExibeInit || ExibeInitClickRest)
{
    <ModalInitGame CallBack="@((choice) => InitGame(choice))">

    </ModalInitGame>
}

<ModalOverGame _modalDisplayWin="@modalDisplayWin"
               _resultado="@resultado"
               _title="@TitleModal"
               CallbackModalDisplayWin="@((display) => modalDisplayWin = display)">
</ModalOverGame>

@code {
    #region Declarations

    private string TitleModal;

    private string tema;
    public string modalDisplay { get; set; }
    public string modalDisplayWin = string.Empty;
    public string resultado { get; set; } = string.Empty;

    int Count = -1;
    public string escolha { get; set; }
    private bool ExibeInitClickRest { get; set; }
    private bool ExibeInit { get; set; }

    Game game = new Game();
  
    VerificadorDeVitoria verificadorDeVitoria = new();


    public string[] ResultGame = new[] { "win", "empate" };

    public bool OnInitializedCompleted { get; set; }
    string choice;
    #endregion

    #region Functions

    protected override void OnInitialized()
    {
        ExibeInit = true;
        OnInitializedCompleted = true;
    }
    void OnSelect(ChangeEventArgs args)
    {
        if (game.DisplayCasa.Length > 0)
        {
            Reset(game.DisplayCasa.Length);
        }
        //gerenciadorDeDificuldade.VerificarDificuldades(args.Value.ToString());

    }
    public void InitGame(string choice)
    {
        if (choice == GlobalConstants.X_PNG)
        {
           
            game.DontChoice = GlobalConstants.CIRCULO_PNG;
            game.ChoiceUser = GlobalConstants.X_PNG;
        }
        else
        {
            game.DontChoice = GlobalConstants.X_PNG;
            game.ChoiceUser = GlobalConstants.CIRCULO_PNG;
        }
        modalDisplay = GlobalConstants.NONE;

    }
    private void Reset(int indice)
    {
        for (int i = 0; i <= indice; i++)
            game.DisplayCasa[i] = GlobalConstants.NONE;

        LimparDados();

        ExibeInitClickRest = true;

    }
    bool Vez_Usuario() => Count % 2 == 0;

    public void ActionCasas(int indice)
    {
        ExibeInitClickRest = false;
        ExibeInit = false;

        if (game.DisplayCasa[indice] == GlobalConstants.BLOCK)
        {
            game.DisplayCasa[indice] = GlobalConstants.BLOCK;
            return;
        }

        Count++;

        if (Vez_Usuario())
        {
            game.iconGame[indice] = game.ChoiceUser;
            game.PosicoesEscolhidas.Add((indice, game.iconGame[indice]));
        }
        else
        {
            game.iconGame[indice] = game.DontChoice;
            game.PosicoesNaoEscolhidas.Add((indice, game.iconGame[indice]));
        }

        GerarVencedor();

        game.DisplayCasa[indice] = GlobalConstants.BLOCK;

    }

    public void GerarVencedor()
    {
        if (VerificarSeHouveEmpate())
            return;

        if (Vez_Usuario())
        {
            if (verificadorDeVitoria.AnalisarGanhador(game.PosicoesDeVitorias, SelecionarPosicoes_Icone(game.PosicoesEscolhidas).posicoes))
            {
                resultado = BindIconGanhador(SelecionarPosicoes_Icone(game.PosicoesEscolhidas).icone);
                SetTitleModal((int)Decimal.Zero);
                ExibirGanhadorModal();
            }
        }
        else
        {
            if (verificadorDeVitoria.AnalisarGanhador(game.PosicoesDeVitorias, SelecionarPosicoes_Icone(game.PosicoesNaoEscolhidas).posicoes))
            {
                resultado = BindIconGanhador(SelecionarPosicoes_Icone(game.PosicoesNaoEscolhidas).icone);
                SetTitleModal((int)Decimal.Zero);
                ExibirGanhadorModal();
            }
        }
    }
    bool VerificarSeHouveEmpate()
    {

        if (Count != 8)
            return false;

        if (!verificadorDeVitoria.AnalisarGanhador(game.PosicoesDeVitorias, SelecionarPosicoes_Icone(game.PosicoesEscolhidas).posicoes) &&
            !verificadorDeVitoria.AnalisarGanhador(game.PosicoesDeVitorias, SelecionarPosicoes_Icone(game.PosicoesNaoEscolhidas).posicoes))
        {
            resultado = GlobalConstants.EMPATE;
            ExibirGanhadorModal();
            SetTitleModal(1);
            return true;
        }
        return false;

    }

    void SetTitleModal(int num)
    {
        TitleModal = ResultGame[num];
    }

    public void ExibirGanhadorModal()
    {
        modalDisplayWin = GlobalConstants.BLOCK;

        LimparDados();
    }


    private void LimparDados()
    {
        game.PosicoesNaoEscolhidas.Clear();
        game.PosicoesEscolhidas.Clear();
        Count = -1;
        game.DontChoice = string.Empty;
        game.ChoiceUser = string.Empty;
    }

    string BindIconGanhador(string iconeGanhador) => iconeGanhador == GlobalConstants.CIRCULO_PNG ? GlobalConstants.BOLINHA : GlobalConstants.X;

    (List<int> posicoes, string icone) SelecionarPosicoes_Icone(List<(int posicao, string icon)> listQObj)
    {
        return (listQObj.Select(s => s.posicao).ToList(), listQObj.Select(s => s.icon).First());
    }
    #endregion

}

