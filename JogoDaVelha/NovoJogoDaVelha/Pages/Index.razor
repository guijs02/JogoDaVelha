@page "/"
@using JogoDaVelha.Classes;

@using JogoDaVelha.Dificuldades
@using JogoDaVelha.Pages.Modals

@if (OnInitializedCompleted)
{
    <h1 id="maintext" style="text-align:center"> tic tac toe</h1>
    <div class="container" id="main">

        <div class="box" style="border-left: 0; border-top: 0" id="box1" @onclick="@(() => ActionCasas(0))">
            <img src="@game.IconGame[0]" class="img-x-o" style="display:@game.DisplayCasa[0]" />

        </div>
        <div class="box" style="border-top: 0" id="box2" @onclick="@(() => ActionCasas(1))">

            <img src="@game.IconGame[1]" class="img-x-o" style="display:@game.DisplayCasa[1]" />
        </div>
        <div class="box" style="border-top: 0; border-right: 0" id="box3" @onclick="@(() => ActionCasas(2))">
            <img src="@game.IconGame[2]" class="img-x-o" style="display:@game.DisplayCasa[2]" />

        </div>

        <div class="box" style="border-left: 0" id="box4" @onclick="@(() => ActionCasas(3))">
            <img src="@game.IconGame[3]" class="img-x-o" style="display:@game.DisplayCasa[3]" />

        </div>

        <div class="box" id="box5" @onclick="@(() => ActionCasas(4))">
            <img src="@game.IconGame[4]" class="img-x-o" style="display:@game.DisplayCasa[4]" />

        </div>
        <div class="box" style="border-right: 0" id="box6" @onclick="@(() => ActionCasas(5))">
            <img src="@game.IconGame[5]" class="img-x-o" style="display:@game.DisplayCasa[5]" />

        </div>

        <div class="box" style="border-left: 0; border-bottom: 0" id="box7" @onclick="@(() => ActionCasas(6))">
            <img src="@game.IconGame[6]" class="img-x-o" style="display:@game.DisplayCasa[6]" />

        </div>
        <div class="box" style="border-bottom: 0" id="box8" @onclick="@(() => ActionCasas(7))">
            <img src="@game.IconGame[7]" class="img-x-o" style="display:@game.DisplayCasa[7]" />
        </div>
        <div class="box" style="border-right: 0; border-bottom: 0" id="box9" @onclick="@(() => ActionCasas(8))">
            <img src="@game.IconGame[8]" class="img-x-o" style="display:@game.DisplayCasa[8]" />
        </div>
    </div>

    <button class="btn btn-success" @onclick="@(() => Reset(8))">Reiniciar</button>

    <select id="selected" onchange="ChangeBackGroundColor()">
        <option value="light">Light </option>
        <option value="dark">Dark</option>
    </select>
}


@if (ExibeInit || ExibeInitClickRest)
{
    <ModalInitGame CallBack="@((choice) => InitGame(choice))">

    </ModalInitGame>
}

<ModalOverGame _modalDisplayWin="@modalDisplayWin"
               _ganhadorDoGame="@GanhadorDoGame"
               _title="@TitleModal"
               _callbackModalDisplayWin="@((display) => modalDisplayWin = display)">
</ModalOverGame>

@code {
    #region Declarations

    private string TitleModal;

    public string modalDisplay { get; set; }
    public string modalDisplayWin = string.Empty;
    public string GanhadorDoGame { get; set; } = string.Empty;

    int ContadorDeMovimentos = -1;

    private bool ExibeInitClickRest { get; set; }
    private bool ExibeInit { get; set; }

    Game game = new Game();

    VerificadorDeVitoria verificadorDeVitoria = new();

    public string[] ResultGame = new[] { "win", "empate" };

    public bool OnInitializedCompleted { get; set; }
    string choice;
    #endregion

    #region Functions

    protected override void OnInitialized()
    {
        ExibeInit = true;
        OnInitializedCompleted = true;
    }

    public void InitGame(string choice)
    {
        if (choice == GlobalConstants.X_PNG)
        {
            SetarEscolhaDoUsuario(GlobalConstants.CIRCULO_PNG, GlobalConstants.X_PNG);
        }
        else
        {
            SetarEscolhaDoUsuario(GlobalConstants.X_PNG, GlobalConstants.CIRCULO_PNG);
        }
        modalDisplay = GlobalConstants.NONE;

    }
    void SetarEscolhaDoUsuario(string dontChoice, string choice)
    {
        game.DontChoice = dontChoice;
        game.ChoiceUser = choice;
    }
    private void Reset(int indice)
    {
        for (int i = 0; i <= indice; i++)
            game.DisplayCasa[i] = GlobalConstants.NONE;

        LimparDados();

        ExibeInitClickRest = true;

    }
    bool Vez_Usuario() => ContadorDeMovimentos % 2 == 0;

    public void ActionCasas(int indice)
    {
        ExibeInitClickRest = false;
        ExibeInit = false;

        if (game.DisplayCasa[indice] == GlobalConstants.BLOCK)
        {
            game.DisplayCasa[indice] = GlobalConstants.BLOCK;
            return;
        }

        ContadorDeMovimentos++;

        bool vezUsuario = Vez_Usuario();

        var DefinirChoiceUser = vezUsuario ? game.ChoiceUser : game.DontChoice;

        var DefinirPosicoes = vezUsuario ? game.PosicoesEscolhidas : game.PosicoesNaoEscolhidas;

        ArmazenarEDefinirPosicoesIcones(game.IconGame, DefinirChoiceUser, indice, DefinirPosicoes);

        GerarVencedor(DefinirPosicoes);

        game.DisplayCasa[indice] = GlobalConstants.BLOCK;

    }

    public void GerarVencedor(List<(int, string)> definirPosicoes)
    {
        if (!VerificarSeHouveGanhador(game.PosicoesDeVitorias, definirPosicoes) && ContadorDeMovimentos == 8)
        {
            GanhadorDoGame = GlobalConstants.EMPATE;
            SetTitleModalOverGame(1);
            ExibirGanhadorModal();
        }
    }
    bool VerificarSeHouveGanhador(int[] posicoesDeVitorias, List<(int, string)> posicoes)
    {
        bool houveGanhador = verificadorDeVitoria.AnalisarGanhador(posicoesDeVitorias, SelecionarPosicoesIcone(posicoes).posicoes);

        if (houveGanhador)
            FinalizarGame(posicoes);


        return houveGanhador;
    }

    void SetTitleModalOverGame(int num)
    {
        TitleModal = ResultGame[num];
    }

    public void ExibirGanhadorModal()
    {
        modalDisplayWin = GlobalConstants.BLOCK;
    }

    void FinalizarGame(List<(int, string)> posicoes)
    {
        var iconeGanhador = SelecionarPosicoesIcone(posicoes).icone;

        GanhadorDoGame = iconeGanhador == GlobalConstants.CIRCULO_PNG ? GlobalConstants.BOLINHA : GlobalConstants.X;
        SetTitleModalOverGame(0);
        ExibirGanhadorModal();
        LimparDados();
    }
    private void LimparDados()
    {
        game.PosicoesNaoEscolhidas.Clear();
        game.PosicoesEscolhidas.Clear();
        ContadorDeMovimentos = -1;
        game.DontChoice = string.Empty;
        game.ChoiceUser = string.Empty;
    }
    void ArmazenarEDefinirPosicoesIcones(string[] iconGame, string choice, int indice, List<(int, string)> posicoes)
    {
        iconGame[indice] = choice;
        posicoes.Add((indice, iconGame[indice]));
    }

    (List<int> posicoes, string icone) SelecionarPosicoesIcone(List<(int posicao, string icon)> listQObj)
    {
        return (listQObj.Select(s => s.posicao).ToList(), listQObj.Select(s => s.icon).First());
    }
    #endregion

}

